import React, { useState, useEffect } from 'react'
import {
  Box,
  Button,
  Card,
  CardContent,
  Typography,
  CircularProgress,
  Alert,
  List,
  ListItem,
  ListItemText,
} from '@mui/material'
import { testConnection, accountService } from '../utils/database'
import type { Account } from '../utils/supabase'

export const DatabaseTest: React.FC = () => {
  const [isConnected, setIsConnected] = useState<boolean | null>(null)
  const [accounts, setAccounts] = useState<Account[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleTestConnection = async () => {
    setLoading(true)
    setError(null)
    
    try {
      const connected = await testConnection()
      setIsConnected(connected)
      
      if (!connected) {
        setError('Failed to connect to database. Please check your configuration.')
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Connection test failed')
      setIsConnected(false)
    } finally {
      setLoading(false)
    }
  }

  const handleLoadAccounts = async () => {
    setLoading(true)
    setError(null)
    
    try {
      const accountsData = await accountService.getAll()
      setAccounts(accountsData)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load accounts')
    } finally {
      setLoading(false)
    }
  }

  const handleCreateSampleAccount = async () => {
    setLoading(true)
    setError(null)
    
    try {
      await accountService.create({
        name: `Sample Account ${Date.now()}`,
        type: 'asset',
        balance: 1000
      })
      
      // Reload accounts after creating
      await handleLoadAccounts()
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create account')
      setLoading(false)
    }
  }

  useEffect(() => {
    // Test connection on component mount
    handleTestConnection()
  }, [])

  return (
    <Box sx={{ maxWidth: 800, mx: 'auto', p: 2 }}>
      <Typography variant="h4" gutterBottom>
        Supabase Database Connection Test
      </Typography>
      
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Connection Status
          </Typography>
          
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
            {loading && <CircularProgress size={20} />}
            {isConnected === true && (
              <Alert severity="success">Connected to Supabase!</Alert>
            )}
            {isConnected === false && (
              <Alert severity="error">Connection failed</Alert>
            )}
            {isConnected === null && !loading && (
              <Typography color="text.secondary">Not tested</Typography>
            )}
          </Box>
          
          <Button
            variant="contained"
            onClick={handleTestConnection}
            disabled={loading}
          >
            Test Connection
          </Button>
        </CardContent>
      </Card>

      <Card sx={{ mb: 2 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Accounts ({accounts.length})
          </Typography>
          
          <Box sx={{ mb: 2, display: 'flex', gap: 1 }}>
            <Button
              variant="contained"
              onClick={handleLoadAccounts}
              disabled={loading || !isConnected}
            >
              Load Accounts
            </Button>
            <Button
              variant="outlined"
              onClick={handleCreateSampleAccount}
              disabled={loading || !isConnected}
            >
              Create Sample Account
            </Button>
          </Box>
          
          {accounts.length > 0 ? (
            <List>
              {accounts.map((account) => (
                <ListItem key={account.id} divider>
                  <ListItemText
                    primary={account.name}
                    secondary={`Type: ${account.type} | Balance: $${account.balance.toFixed(2)}`}
                  />
                </ListItem>
              ))}
            </List>
          ) : (
            <Typography color="text.secondary">
              No accounts found. Try creating a sample account or check your database setup.
            </Typography>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Setup Instructions
          </Typography>
          <Typography variant="body2" component="div">
            <ol>
              <li>Go to your Supabase dashboard: <strong>https://bgxknceshxxifwytalex.supabase.co</strong></li>
              <li>Navigate to Settings â†’ API</li>
              <li>Copy your <strong>anon/public</strong> key</li>
              <li>Replace <code>your_anon_key_here</code> in your <code>.env.local</code> file</li>
              <li>Create the following tables in your Supabase database:
                <ul>
                  <li><strong>accounts</strong> - Chart of accounts</li>
                  <li><strong>transactions</strong> - Simple transactions</li>
                  <li><strong>journal_entries</strong> - Journal entries</li>
                  <li><strong>journal_entry_lines</strong> - Journal entry line items</li>
                </ul>
              </li>
            </ol>
          </Typography>
        </CardContent>
      </Card>
    </Box>
  )
}
